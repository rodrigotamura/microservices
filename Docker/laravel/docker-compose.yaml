# temos que indicar qual a versao do DockerCompose que iremos trabalhar
version: '3'

# A ordem dos serviços será, subirá primeiro o Redis e o DB, depois o App
# e finalmente o NGINX (vide propriedade depends_on em app e nginx)

# vamos declarar os servicos
services:
  # o nome será app pelo fato de termos configurado
  # o arquivo de configuração do NGINX para busca o
  # host app na porta 9000
  app:
    build: .
    # se eu não informar o container_name, este serviço assumirá outro nome
    # quando for criado. E tanto o nome do serviço como o nome do container,
    # se forem diferentes, serão os hosts deste serviço (teste com o ping)
    container_name: app
    entrypoint: dockerize -template ./.docker/app/.env:.env -wait tcp://db:3306 -timeout 40s ./.docker/entrypoint.sh
    environment:
      - DB_HOST=db
      - DB_DATABASE=laravel
      - DB_USERNAME=root
      - DB_PASSWORD=root
    volumes:
      - .:/var/www
    # quais serviços este serviço depende
    # na versão 3 do Docker Compose, apenas garante a
    # ordem de criação de cada serviço. Então esta app
    # dependen tanto do db quanto do Redis pra rodar.
    depends_on:
      - db
      - redis
    # Definindo qual rede para este container
    networks:
      - app-network

  # o nome do container se coloca nesta identacao
  # que sera inclusive reconhecido pelos containers
  # criados neste compose
  nginx:
    # Indicando como e qual imagem vamos fazer o build
    # no nosso caso vamos fazer o build a partir do Dockerfile
    # que criamos
    build: .docker/nginx
    # definindo o nome do container
    container_name: nginx
    # o container sera reiniciado caso caia?
    restart: always
    # Podemos entrar de forma interativa dentro do container
    # via docker exec -it
    tty: true
    # configurando a porta - cada porta uma linha
    ports:
      # a porta 8000 do meu PC mapeia a porta 80 do NGINX no container
      - "8000:80"
    # configurando volumes - cada linha um volume diferente
    volumes:
      # todo conteudo da pasta atual sera o volume em /var/www
      - .:/var/www
    # Definindo qual rede para este container
    networks:
      - app-network
    depends_on:
      - app

  db:
    image: mysql:5.7
    # O seguinte comando sera muito necessario para que nao de problema
    command: --innodb-use-native-aio=0
    container_name: db
    restart: always
    tty: true
    ports:
        - "3306:3306"
    # Os seguintes comandos configurações de variáveis de ambiente para setarmos
    # uma espécie de brinde quando utilizamos a imagem oficial do MySQL
    environment:
      # criando o DB chamado laravel
      - MYSQL_DATABASE=laravel
      # setando a senha do usuário root
      - MYSQL_ROOT_PASSWORD=root
      # setando o quem é o usuário root
      - MYSQL_USER=root
    volumes:
      # em /var/lib/mysql está guardado todo o conteúdo do MySQL
      - ./.docker/dbdata:/var/lib/mysql
    networks:
      - app-network

  redis:
    image: redis:alpine
    expose:
      - 6379
    # Definindo qual rede para este container
    networks:
      - app-network

# Configurando a rede
networks:
  # O nome da rede sera app-network
  app-network:
    driver: bridge


apiVersion: apps/v1
kind: Deployment
metadata:
    name: mysql-server
spec: # do Deployment
    replicas: 1
    selector:
        matchLabels:
            app: mysql-server
            tier: db

    template: # referente ao POD
        metadata:
            labels:
                app: mysql-server
                ## estamos criando esta label chamada tier
                # pois eventualmente teremos varias aplicacoes
                # como Laravel, Go, etc., e o tier diz onde vamos
                # encontrar esta aplicacao. Entao eu posso 
                # dizer que é um tier backend, tier frontend ou tier db
                # Não é algo obrigatório, é uma questão de organização
                # mesmo
                tier: db
        spec: # do POD
            containers: 
            - image: mysql:5.7
              name: mysql-server
              # a partir de agora, vamos utilizar o env
              # onde podemos setar as variaveis aquelas
              # de MySQL que setamos quando criamos um
              # Dockerfile
              env:
              # MYSQL_ROOT_PASSWORD=root
              - name: MYSQL_ROOT_PASSWORD
              # value: root -> Antigo, sem usar secrets
                # utilizando a SECRET
                valueFrom: 
                    secretKeyRef: 
                        name: mysql-pass
                        key: password
              # Se quiser adicionar mais...
        #     - name: VARIAVEL
        #       value: valor
              
              # normalmente num ambiente cloud - não no Minikube que é local
              # quando um volume é gerado o arquivo lost+found vem junto
              # dentro deste volume. Acontece que o MySQL exige que a pasta
              # seja vazia. Portanto, vamos passar um argumento para 
              # ignorar o lost+found para evitar este erro.
              args: 
              - "--ignore-db-dir=lost+found"
              ports:
              - containerPort: 3306

              # Monta o volume efetivamente
              volumeMounts:
              # queremos dar o mount neste volume indicado em
              # spec.template.spec.volumes.name neste arquivo.
              - name: mysql-persistent-storage
                # qual o caminho 
                mountPath: /var/lib/mysql

            # fazendo a definição de volume
            volumes:
              # atribuindo um nome qualquer
            - name: mysql-persistent-storage
              # indicando o nome do persistentVolumeClaim
              persistentVolumeClaim:
                # puxamos lá do arquivo persistent-volume.yaml
                claimName: mysql-pv-claim



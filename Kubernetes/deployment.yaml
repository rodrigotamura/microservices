# Versão da API Kubernetes
apiVersion: apps/v1

# indicando que o tipo sera Deployment
kind: Deployment

metadata:
    # nome do deployment
    name: hello-nginx

# quando criamos o POD, estavamos criando as especificacoes
# do POD. Neste caso sao as especificacoes do deployment
spec:
    # Trabalhando com réplicasssss, e queremos 3 réplicas
    replicas: 3

    # quando for criar o service do nginx
    # tudo vai ficar mais facil porque lá
    # nos services vamos declarar qual é o selector 
    # para pegarmos aqui nesse deployment através das labels
    # então serão criados os PODs baseados neste selector
    # ou seja, o Service irá procurar baseado no 
    # service.yaml.spec.selector.app=by-nginx

    # Antigamente, quando não se declarava este selector
    # dentro do deployment, o match se dava pelo
    # deployment.yaml.spec.template.metadata.labels
    # o que é muito ruim.
    selector:
        matchLabels:
            app: bye-nginx
    # porem... quando declaro o template, estamos criando
    # o modelo de um POD que eu quero que o meu deployment
    # crie. Tudo que estiver aninhado ao template serao
    # as especificacoes do POD que este deployment crie
    template:
        # voce vai perceber que esta parte é muito parecida
        # com o que declaramos lá no arquivo yaml do POD
        metadata:
            # forma de identificar e buscar ou filtrar os nossos PODs
            # que contem certas labels. Por exemplo, eu quero
            # buscar todos os PODs que possui o NGINX e que
            # possua a aplicacao X, realizando assim a
            # FILTRAGEM
            labels: 
                # label chamado app com o valor hello-nginx
                app: bye-nginx
            
        # lembrando que o seguinte spec deste POD
        spec:
            containers:
                - name: nginx
                  image: nginx:1.17-alpine
                  ports: 
                  - containerPort: 80

                  # Integrando este container com o volume criado abaixo
                  # aqui declaramos onde e como vão funcionar as configurações
                  # de montagem do volume neste container 
                  volumeMounts:
                    # local dentro do container
                    # neste caso o nginx.conf ficara aqui
                  - mountPath: /etc/nginx/conf.d
                    # qual o nome deste volume. É o momento em que integramos 
                    # o volume que criamos abaixo com o container
                    name: nginx-conf
                    # Ningu[em pode fazer alteracoes nele
                    readOnly: true


            # aqui vamos declarar os volumes, que podem ser vários
            volumes:
                # nome do volume
            - name: nginx-conf
              # como iremos pegar o valor deste volume
              # a utilizada aqui é uma das formas
              configMap: 
                # qual o nome do ConfigMap?
                # (veja o que foi informado lá no arquivo configmap.yaml)
                name: nginx-conf
                # quais sao os itens do nginx-conf
                items:
                    # qual a key qye você quer utilizar?
                    # você pode pegar o nome da key em configmap.yaml.data
                    - key: nginx.conf
                      # quando este ConfigMap for montado em qualquer local,
                      # como que vai ser o nome do arquivo que vai conter
                      # este conteúdo e que será armazenado dentro do container NGINX? 
                      # Então o nome será o nginx.conf
                      path: nginx.conf